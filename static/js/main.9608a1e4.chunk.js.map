{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/useSubstrate.js","substrate-lib/utils.js","substrate-lib/components/DeveloperConsole.js","substrate-lib/components/TxButton.js","AccountSelector.js","BlockNumber.js","Events.js","Metadata.js","NodeInfo.js","society/Actions.js","society/Balance.js","society/Cards/BidCard.js","society/Cards/PeriodCard.js","society/Bids.js","society/Cards/CandidateCard.js","society/Candidates.js","society/Cards/DefenderCard.js","society/Defender.js","society/Cards/MemberCard.js","society/Members.js","society/Cards/FounderCard.js","society/Founder.js","society/Cards/HeadCard.js","society/Head.js","society/Pot.js","society/Rules.js","society/Cards/SuspendedCandidateCard.js","society/SuspendedCandidates.js","society/Cards/SuspendedMemberCard.js","society/SuspendedMembers.js","App.js","index.js"],"names":["config","require","reduce","mem","n","undefined","process","slice","INIT_STATE","socket","PROVIDER_SOCKET","types","CUSTOM_TYPES","keyring","keyringState","api","apiState","reducer","state","action","type","payload","Error","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","Provider","value","children","useSubstrate","useContext","connect","useCallback","a","provider","WsProvider","ApiPromise","create","_api","isReady","console","error","loadAccounts","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","useEffect","toFormat","BigJS","DeveloperConsole","window","util","util_crypto","TxButton","accountPair","label","setStatus","basic","primary","style","color","attrs","disabled","params","sudo","tx","isQuery","transaction","isInjected","web3FromSource","injected","fromParam","setSigner","signer","txExecute","e","toString","signAndSend","status","isFinalized","asFinalized","catch","query","result","Button","onClick","AccountSelector","setAccountAddress","useState","accountSelected","setAccountSelected","keyringOptions","getPairs","account","text","toUpperCase","icon","initialAddress","length","Menu","attached","tabular","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","Icon","circular","Dropdown","search","selection","clearable","placeholder","options","onChange","_","dropdown","balances","freeBalance","BalanceAnnotation","accountBalance","setAccountBalance","unsubscribe","balance","then","unsub","Label","pointing","BlockNumber","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","unsubscribeAll","number","toNumber","timer","time","id","setInterval","clearInterval","Grid","Column","Card","Content","textAlign","Statistic","extra","Events","eventFeed","setEventFeed","filter","system","events","record","event","phase","typeDef","eventName","section","method","includes","data","index","date","summary","extraText","documentation","join","content","Feed","overflow","maxHeight","Metadata","version","metadata","setMetadata","rpc","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","NodeInfo","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","getInfo","href","Main","tip","who","formState","setFormState","members","bids","candidates","suspendedMembers","suspendedCandidates","Form","Input","society","vouch","some","bid","unbid","candidate","Bids","pot","setPot","TREASURY_ACCOUNT","stringToU8a","padEnd","formatBalance","transfer","secondary","target","encodeAddress","BidCard","users","user","floated","kind","isDeposit","asDeposit","asVouch","PeriodCard","enabled","period","setBids","rotationPeriod","consts","u","Group","userType","CandidateCard","votes","v","vote","Popup","member","header","className","setVotes","setCandidates","promises","push","queryMulti","results","count","Candidates","DefenderCard","defender","Object","keys","voter","defenderVote","setDefender","challengePeriod","defenderVotes","multi","votesMap","acc","MemberCard","strikes","setStrikes","setMembers","Members","FounderCard","founder","Founder","setFounder","head","setHead","rules","setRules","rulesTx","rulesText","blake2AsHex","Rules","SuspendedCandidateCard","judgementOrigin","judgeSuspendedCandidate","setSuspendedCandidates","addresses","suspendedStatuses","suspended","i","isSome","Suspended","SuspendedMemberCard","judgeSuspendedMember","setSuspendedMembers","isTrue","accountAddress","finalizedBlockNumber","setfinalizedBlockNumber","getPair","loader","Dimmer","active","Loader","contextRef","createRef","setDefaults","decimals","unit","ref","Sticky","context","stackable","columns","Row","stretched","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9608a1e4.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars };\nexport default config;\n","import React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport config from '../config';\n\nconst INIT_STATE = {\n  socket: config.PROVIDER_SOCKET,\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiState: null\n};\n\nconst reducer = (state, action) => {\n  let socket = null;\n\n  switch (action.type) {\n    case 'RESET_SOCKET':\n      socket = action.payload || state.socket;\n      return { ...state, socket, api: null, apiState: null };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  return (\n    <SubstrateContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </SubstrateContext.Provider>\n  );\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nexport { SubstrateContext, SubstrateContextProvider };\n","import { useContext, useEffect, useCallback } from 'react';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\nimport { SubstrateContext } from './SubstrateContext';\n\nconst useSubstrate = () => {\n  const [state, dispatch] = useContext(SubstrateContext);\n\n  // `useCallback` so that returning memoized function and not created\n  //   everytime, and thus re-render.\n  const { api, socket, types } = state;\n  const connect = useCallback(async () => {\n    if (api) return;\n\n    const provider = new WsProvider(socket);\n\n    try {\n      const _api = await ApiPromise.create({ provider, types });\n      dispatch({ type: 'CONNECT', payload: _api });\n      await _api.isReady;\n      dispatch({ type: 'CONNECT_SUCCESS' });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'CONNECT_ERROR' });\n    }\n  }, [api, socket, types, dispatch]);\n\n  // hook to get injected accounts\n  const { keyringState } = state;\n  const loadAccounts = useCallback(async () => {\n    // Ensure the method only run once.\n    if (keyringState) return;\n\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  }, [keyringState, dispatch]);\n\n  useEffect(() => {\n    connect();\n  }, [connect]);\n\n  useEffect(() => {\n    loadAccounts();\n  }, [loadAccounts]);\n\n  return { ...state, dispatch };\n};\n\nexport default useSubstrate;\n","import BigJS from 'big.js';\nimport toFormat from 'toformat';\n\nconst Big = toFormat(BigJS);\n\nconst utils = {\n  prettyBalance: function (amt, opts = {}) {\n    if (typeof amt !== 'number' && typeof amt !== 'string') {\n      throw new Error(`${amt} is not a number`);\n    }\n\n    // default option values\n    opts = { power: 8, decimal: 2, unit: 'Units', ...opts };\n\n    const bn = Big(amt);\n    const divisor = Big(10).pow(opts.power);\n    const displayed = bn.div(divisor).toFormat(opts.decimal);\n    return `${displayed.toString()} ${opts.unit}`;\n  }\n};\n\nexport default utils;\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api } = useSubstrate();\n  window.api = api;\n  window.util = require('@polkadot/util');\n  window.util_crypto = require('@polkadot/util-crypto');\n  window.keyring = require('@polkadot/keyring');\n\n  return null;\n}\n","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\n\nexport default function TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  basic = null,\n  primary = null,\n  style = null,\n  color = null,\n  type = null,\n  attrs = null,\n  disabled = false\n}) {\n  const { api } = useSubstrate();\n  const { params = null, sudo = false, tx = null } = attrs;\n  const isQuery = () => type === 'QUERY';\n\n  const transaction = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromParam;\n\n    // set the signer\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromParam = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromParam = accountPair;\n    }\n    setStatus('Sending...');\n\n    let txExecute;\n    try {\n      // Check if tx has params\n      if (!params) {\n        txExecute = !sudo ? tx() : tx.sudo();\n      } else {\n        txExecute = !sudo ? tx(...params) : tx.sudo(...params);\n      }\n    } catch (e) {\n      console.error('ERROR forming transaction:', e);\n      setStatus(e.toString());\n    }\n\n    if (txExecute) {\n      txExecute\n        .signAndSend(fromParam, ({ status }) => {\n          status.isFinalized\n            ? setStatus(\n                `Completed at block hash #${status.asFinalized.toString()}`\n            )\n            : setStatus(`Current transaction status: ${status.type}`);\n        })\n        .catch(e => {\n          setStatus(':( transaction failed');\n          console.error('ERROR transaction:', e);\n        });\n    }\n  };\n\n  const query = async () => {\n    try {\n      const result = await tx(...params);\n      setStatus(result.toString());\n    } catch (e) {\n      console.error('ERROR query:', e);\n      setStatus(e.toString());\n    }\n  };\n\n  return (\n    <Button\n      primary={primary}\n      basic={basic}\n      style={style}\n      color={color}\n      type='submit'\n      onClick={isQuery() ? query : transaction}\n      disabled={disabled || !tx || (!isQuery() && !accountPair)}\n    >\n      {label}\n    </Button>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport {\n  Menu,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function AccountSelector (props) {\n  const { api, keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountSelected(initialAddress);\n    setAccountAddress(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src='Substrate-Logo.png' size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='right'>\n          <Icon\n            name='users'\n            size='large'\n            circular\n            color={accountSelected ? 'green' : 'red'}\n          />\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => { onChange(dropdown.value); }}\n            value={accountSelected}\n          />\n          {api.query.balances && api.query.balances.freeBalance\n            ? <BalanceAnnotation accountSelected={accountSelected} />\n            : null}\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n\nfunction BalanceAnnotation (props) {\n  const { accountSelected } = props;\n  const { api } = useSubstrate();\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.balances.freeBalance(accountSelected, balance => {\n        setAccountBalance(balance.toString());\n      }).then(unsub => {\n        unsubscribe = unsub;\n      }).catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [accountSelected, api.query.balances]);\n\n  return accountSelected\n    ? <Label pointing='left'>\n      <Icon\n        name='money bill alternate'\n        color={accountBalance > 0 ? 'green' : 'red'}\n      />\n      {accountBalance}\n    </Label>\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  const { finalized, blockNumber, setBlockNumber } = props;\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber, setBlockNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={(finalized ? 'Finalized' : 'Current') + ' Block Number'}\n            value={blockNumber}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='time' /> {blockNumberTimer}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Feed, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = [\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n    ];\n\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const { event, phase } = record;\n        const types = event.typeDef;\n\n        // show what we are busy with\n        const eventName = `${event.section}:${\n          event.method\n        }:: (phase=${phase.toString()})`;\n\n        if (filter.includes(eventName)) return;\n\n        // loop through each of the parameters, displaying the type and data\n        const params = event.data.map((data, index) =>\n          `${types[index].type}: ${data.toString()}`\n        );\n\n        setEventFeed(e => [{\n          icon: 'bell',\n          date: 'X Blocks Ago',\n          summary: `${eventName}-${e.length}`,\n          extraText: event.meta.documentation.join(', ').toString(),\n          content: params.join(', ')\n        }, ...e]);\n      });\n    });\n  }, [api.query.system]);\n\n  return (\n    <Grid.Column>\n      <h1>Events</h1>\n      <Feed style={{ overflow: 'auto', maxHeight: 250 }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Metadata (props) {\n  const { api } = useSubstrate();\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n          <Card.Meta><span>v{metadata.version}</span></Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre><code>{JSON.stringify(metadata.data, null, 2)}</code></pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{' '}\n            <a href='https://github.com/substrate-developer-hub/substrate-front-end-template'>\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from 'react';\nimport { Grid, Form, Input } from 'semantic-ui-react';\n\nimport { useSubstrate } from '../substrate-lib';\nimport { TxButton } from '../substrate-lib/components';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState(null);\n  const [formState, setFormState] = useState({\n    value: '',\n    tip: '',\n    who: ''\n  });\n  const {\n    accountPair,\n    members,\n    bids,\n    candidates,\n    suspendedMembers,\n    suspendedCandidates\n  } = props;\n\n  const onChange = (_, data) =>\n    setFormState(formState => ({ ...formState, [data.state]: data.value }));\n\n  const { value, tip, who } = formState;\n\n  if (accountPair && members.includes(accountPair.address)) {\n    return (\n      <Grid.Column>\n        <h2>You are a Member of the Society</h2>\n        <h3>Vouch for Others</h3>\n        <Form>\n          <Input\n            onChange={onChange}\n            placeholder='Who'\n            state='who'\n            type='text'\n            action\n          />\n          <Input\n            onChange={onChange}\n            placeholder='Bid Amount'\n            state='value'\n            type='text'\n            action\n          />\n          <Input\n            onChange={onChange}\n            placeholder='Tip Amount'\n            state='tip'\n            type='text'\n            action\n          />\n          <TxButton\n            accountPair={accountPair}\n            label='Place Vouch'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [who, value, tip],\n              tx: api.tx.society.vouch\n            }}\n          />\n        </Form>\n        {status}\n      </Grid.Column>\n    );\n  } else if (\n    accountPair &&\n    bids.some(bid => bid.who.toString() === accountPair.address)\n  ) {\n    return (\n      <Grid.Column>\n        <h2>You are a Bid</h2>\n        <h3>Wait for your bid to be accepted or unbid.</h3>\n        <Form>\n          <TxButton\n            accountPair={accountPair}\n            label='Unbid'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [],\n              tx: api.tx.society.unbid\n            }}\n          />\n        </Form>\n        {status}\n      </Grid.Column>\n    );\n  } else if (\n    accountPair &&\n    candidates.some(\n      candidate => candidate.who.toString() === accountPair.address\n    )\n  ) {\n    return (\n      <Grid.Column>\n        <h2>You are a Candidate</h2>\n        <h3>Ask members to vote for you!</h3>\n      </Grid.Column>\n    );\n  } else {\n    return (\n      <Grid.Column>\n        <h2>Join the Society</h2>\n        <h3>Make a Bid</h3>\n        <Form>\n          <Input\n            onChange={onChange}\n            placeholder='Bid Amount'\n            state='value'\n            type='text'\n            action\n          />\n          <TxButton\n            accountPair={accountPair}\n            label='Place Bid'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [value],\n              tx: api.tx.society.bid\n            }}\n          />\n        </Form>\n        {status}\n      </Grid.Column>\n    );\n  }\n}\n\nexport default function Bids (props) {\n  const { api } = useSubstrate();\n  return api.query.society && api.query.society.bids ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Button } from 'semantic-ui-react';\nimport { stringToU8a, formatBalance } from '@polkadot/util';\nimport { encodeAddress } from '@polkadot/util-crypto';\n\nimport { useSubstrate } from '../substrate-lib';\nimport { TxButton } from '../substrate-lib/components';\n\nexport default function BlockNumber (props) {\n  const { accountPair } = props;\n  const { api } = useSubstrate();\n  const [pot, setPot] = useState(0);\n  const [status, setStatus] = useState('');\n\n  const TREASURY_ACCOUNT = stringToU8a('modlpy/socie'.padEnd(32, '\\0'));\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    api.query.balances\n      .freeBalance(TREASURY_ACCOUNT, balance => {\n        setPot(balance.toString());\n      })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [TREASURY_ACCOUNT, api.query.balances]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic label={'Society Balance'} value={formatBalance(pot)} />\n        </Card.Content>\n        <Card.Content extra>\n          <TxButton\n            accountPair={accountPair}\n            label='Donate'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            primary\n            attrs={{\n              params: [TREASURY_ACCOUNT, '1000000000000000'],\n              tx: api.tx.balances.transfer\n            }}\n          />\n          <Button\n            secondary\n            content=\"View Account\"\n            target=\"_blank\"\n            href={'https://polkascan.io/pre/kusama-cc3/account/' + encodeAddress(TREASURY_ACCOUNT)}\n          />\n          <br />\n          {status}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React from 'react';\nimport { Card, Image } from 'semantic-ui-react';\n\nexport default function BidCard (props) {\n  const { accountPair, users } = props;\n  if (users.length !== 0) {\n    return users.map(user => (\n      <Card\n        key={user.who.toString()}\n        color={accountPair.address === user.who.toString() ? 'green' : null}\n      >\n        <Card.Content>\n          <Image\n            floated='right'\n            size='mini'\n            src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\n          />\n          <Card.Header>{user.who.toString()}</Card.Header>\n          <Card.Meta>{user.kind.isDeposit ? 'Bid' : 'Vouch'}</Card.Meta>\n          <Card.Description>\n            {user.kind.isDeposit ? (\n              'Deposit Amount: ' + user.kind.asDeposit.toString()\n            ) : (\n              <>\n                {'Vouching Member: ' + user.kind.asVouch[0].toString()}\n                <br />\n                {'Vouching Tip: ' + user.kind.asVouch[1].toString()}\n              </>\n            )}\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>{user.value.toString()}</Card.Content>\n      </Card>\n    ));\n  } else {\n    return null;\n  }\n}\n","import React from 'react';\nimport { Card, Statistic, Icon } from 'semantic-ui-react';\n\nexport default function PeriodCard (props) {\n  const { enabled = true, period, blockNumber, name } = props;\n  if (enabled) {\n    return (\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={'Blocks Left'}\n            value={period - (blockNumber % period)}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='time' /> {name} every {period} blocks.\n        </Card.Content>\n      </Card>\n    );\n  } else {\n    return null;\n  }\n}\n","import React, { useEffect } from 'react';\nimport { Card, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from '../substrate-lib';\nimport BidCard from './Cards/BidCard';\nimport PeriodCard from './Cards/PeriodCard';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { accountPair, bids, setBids, blockNumber } = props;\n\n  const rotationPeriod = api.consts.society.rotationPeriod.toNumber();\n\n  useEffect(() => {\n    let unsubscribe = null;\n\n    api.query.society\n      .bids(setBids)\n      .then(u => {\n        unsubscribe = u;\n      })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.society, setBids]);\n\n  return (\n    <Grid.Column>\n      <h2>Bids</h2>\n      <Card.Group>\n        <PeriodCard\n          enabled={bids.length > 0}\n          period={rotationPeriod}\n          blockNumber={blockNumber}\n          name={'Bid rotation'}\n        />\n        <BidCard users={bids} userType={'Bid'} accountPair={accountPair} />\n      </Card.Group>\n    </Grid.Column>\n  );\n}\n\nexport default function Bids (props) {\n  const { api } = useSubstrate();\n  return api.query.society && api.query.society.bids ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React from 'react';\nimport { Card, Image, Popup, Icon } from 'semantic-ui-react';\nimport { TxButton } from '../../substrate-lib/components';\nimport { useSubstrate } from '../../substrate-lib';\n\nexport default function CandidateCard (props) {\n  const { api } = useSubstrate();\n\n  const { accountPair, setStatus, users, votes, members } = props;\n\n  if (users.length !== 0) {\n    return users.map(user => (\n      <Card\n        key={user}\n        color={accountPair.address === user.who.toString() ? 'green' : null}\n      >\n        <Card.Content>\n          <Image\n            floated='right'\n            size='mini'\n            src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\n          />\n          <Card.Header>{user.who.toString()}</Card.Header>\n          <Card.Meta>Friends of Elliot</Card.Meta>\n          <Card.Description>\n            {user.kind.toString()}\n            <br />\n            {votes\n              .filter(v => v.candidate === user.who)\n              .map(vote => {\n                if (vote.vote.toString() === '0x02') {\n                  return (\n                    <Popup\n                      key={vote.candidate + vote.member}\n                      content={vote.member.toString()}\n                      header={'Approved'}\n                      trigger={<Icon circular color='green' name='checkmark' />}\n                    />\n                  );\n                } else if (vote.vote.toString() === '0x01') {\n                  return (\n                    <Popup\n                      key={vote.candidate + vote.member}\n                      content={vote.member.toString()}\n                      header={'Rejected'}\n                      trigger={<Icon circular color='red' name='cancel' />}\n                    />\n                  );\n                } else if (vote.vote.toString() === '0x00') {\n                  return (\n                    <Popup\n                      key={vote.candidate + vote.member}\n                      content={vote.member.toString()}\n                      header={'Skeptic'}\n                      trigger={\n                        <Icon circular color='yellow' name='exclamation' />\n                      }\n                    />\n                  );\n                } else {\n                  return (\n                    <Popup\n                      key={vote.candidate + vote.member}\n                      content={vote.member.toString()}\n                      header={'Not Voted'}\n                      trigger={<Icon circular color='grey' name='question' />}\n                    />\n                  );\n                }\n              })}\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          {user.value.toString()}\n          <div className='ui three buttons'>\n            <TxButton\n              accountPair={accountPair}\n              label='Reject'\n              setStatus={setStatus}\n              type='TRANSACTION'\n              color='red'\n              basic\n              attrs={{\n                params: [user.who, false],\n                tx: api.tx.society.vote\n              }}\n              disabled={accountPair && !members.includes(accountPair.address)}\n            />\n            <TxButton\n              accountPair={accountPair}\n              label='Approve'\n              setStatus={setStatus}\n              type='TRANSACTION'\n              color='green'\n              basic\n              attrs={{\n                params: [user.who, true],\n                tx: api.tx.society.vote\n              }}\n              disabled={accountPair && !members.includes(accountPair.address)}\n            />\n          </div>\n        </Card.Content>\n      </Card>\n    ));\n  } else {\n    return null;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from '../substrate-lib';\nimport CandidateCard from './Cards/CandidateCard';\nimport PeriodCard from './Cards/PeriodCard';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState(null);\n  const [votes, setVotes] = useState([]);\n  const { accountPair, members, candidates, setCandidates, blockNumber } = props;\n\n  const rotationPeriod = api.consts.society.rotationPeriod.toNumber();\n\n  useEffect(() => {\n    let unsubscribe = null;\n\n    api.query.society\n      .candidates(setCandidates)\n      .then(u => {\n        unsubscribe = u;\n      })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.society, setCandidates]);\n\n  useEffect(() => {\n    var unsubscribe = null;\n\n    var promises = [];\n\n    for (var candidate of candidates) {\n      for (var member of members) {\n        promises.push([api.query.society.votes, [candidate.who, member]]);\n      }\n    }\n\n    api\n      .queryMulti(promises, results => {\n        var votes = [];\n        let count = 0;\n        for (var candidate of candidates) {\n          for (var member of members) {\n            votes.push({\n              candidate: candidate.who,\n              member: member,\n              vote: results[count]\n            });\n            count += 1;\n          }\n        }\n        setVotes(votes);\n      })\n      .then(u => {\n        unsubscribe = u;\n      })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api, api.query.society, candidates, members]);\n\n  return (\n    <Grid.Column>\n      <h2>Candidates</h2>\n      <Card.Group>\n        <PeriodCard\n          enabled={candidates.length > 0}\n          period={rotationPeriod}\n          blockNumber={blockNumber}\n          name={'Candidate rotation'}\n        />\n        <CandidateCard\n          users={candidates}\n          votes={votes}\n          accountPair={accountPair}\n          setStatus={setStatus}\n          members={members}\n        />\n      </Card.Group>\n      {status}\n    </Grid.Column>\n  );\n}\n\nexport default function Candidates (props) {\n  const { api } = useSubstrate();\n  return api.query.society && api.query.society.bids ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React from 'react';\nimport { Card, Image, Icon, Popup } from 'semantic-ui-react';\nimport { TxButton } from '../../substrate-lib/components';\nimport { useSubstrate } from '../../substrate-lib';\n\nexport default function DefenderCard (props) {\n  const { defender, setStatus, accountPair, votes, members } = props;\n  const { api } = useSubstrate();\n\n  if (defender) {\n    return (\n      <Card\n        color={accountPair.address === defender.toString() ? 'green' : null}\n      >\n        <Card.Content>\n          <Image\n            floated='right'\n            size='mini'\n            src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\n          />\n          <Card.Header>{defender.toString()}</Card.Header>\n          <Card.Meta>Defender</Card.Meta>\n          <Card.Description>\n            {Object.keys(votes).map(voter => {\n              if (votes[voter].toString() === '0x02') {\n                return (\n                  <Popup\n                    key={voter}\n                    content={voter}\n                    header={'Approved'}\n                    trigger={<Icon circular color='green' name='checkmark' />}\n                  />\n                );\n              } else if (votes[voter].toString() === '0x01') {\n                return (\n                  <Popup\n                    key={voter}\n                    content={voter}\n                    header={'Rejected'}\n                    trigger={<Icon circular color='red' name='cancel' />}\n                  />\n                );\n              } else {\n                return (\n                  <Popup\n                    key={voter}\n                    content={voter}\n                    header={'Not Voted'}\n                    trigger={<Icon circular color='grey' name='question' />}\n                  />\n                );\n              }\n            })}\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <div className='ui three buttons'>\n            <TxButton\n              accountPair={accountPair}\n              label='Reject'\n              setStatus={setStatus}\n              type='TRANSACTION'\n              color='red'\n              basic\n              attrs={{\n                params: [false],\n                tx: api.tx.society.defenderVote\n              }}\n              disabled={accountPair && !members.includes(accountPair.address)}\n            />\n            <TxButton\n              accountPair={accountPair}\n              label='Approve'\n              setStatus={setStatus}\n              type='TRANSACTION'\n              color='green'\n              basic\n              attrs={{\n                params: [true],\n                tx: api.tx.society.defenderVote\n              }}\n              disabled={accountPair && !members.includes(accountPair.address)}\n            />\n          </div>\n        </Card.Content>\n      </Card>\n    );\n  } else {\n    return null;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from '../substrate-lib';\nimport DefenderCard from './Cards/DefenderCard';\nimport PeriodCard from './Cards/PeriodCard';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState(null);\n  const [defender, setDefender] = useState('');\n  const [votes, setVotes] = useState([]);\n\n  const { accountPair, members, blockNumber } = props;\n\n  const challengePeriod = api.consts.society.challengePeriod.toNumber();\n\n  useEffect(() => {\n    let unsubscribe = null;\n\n    api.query.society\n      .defender(setDefender)\n      .then(u => {\n        unsubscribe = u;\n      })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.society]);\n\n  useEffect(() => {\n    let unsubscribe = null;\n\n    api.query.society.defenderVotes\n      .multi(members, votes => {\n        const votesMap = members.reduce(\n          (acc, address, index) => ({\n            ...acc,\n            [address]: votes[index]\n          }),\n          {}\n        );\n        setVotes(votesMap);\n      })\n      .then(u => {\n        unsubscribe = u;\n      })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.society, members]);\n\n  return (\n    <Grid.Column>\n      <h2>Defender</h2>\n      <Card.Group>\n        <PeriodCard\n          enabled\n          period={challengePeriod}\n          blockNumber={blockNumber}\n          name={'Challenge period'}\n        />\n        <DefenderCard\n          defender={defender}\n          votes={votes}\n          accountPair={accountPair}\n          setStatus={setStatus}\n          members={members}\n        />\n      </Card.Group>\n      {status}\n    </Grid.Column>\n  );\n}\n\nexport default function Candidates (props) {\n  const { api } = useSubstrate();\n  return api.query.society &&\n    api.query.society.defender &&\n    api.query.society.defenderVotes ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React from 'react';\nimport { Card, Image } from 'semantic-ui-react';\n\nexport default function MemberCard (props) {\n  const { users, strikes } = props;\n  if (users.length !== 0) {\n    return users.map((user, index) => (\n      <Card\n        key={user}\n        color={props.accountPair.address === user.toString() ? 'green' : null}\n      >\n        <Card.Content>\n          <Image\n            floated='right'\n            size='mini'\n            src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\n          />\n          <Card.Header>{user.toString()}</Card.Header>\n          <Card.Meta>Member</Card.Meta>\n          <Card.Description>{'Description'}</Card.Description>\n        </Card.Content>\n        <Card.Content extra>{'Strikes: ' + strikes[index]}</Card.Content>\n      </Card>\n    ));\n  } else {\n    return null;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from '../substrate-lib';\nimport MemberCard from './Cards/MemberCard';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [strikes, setStrikes] = useState([]);\n\n  const { accountPair, members, setMembers } = props;\n\n  useEffect(() => {\n    let unsubscribe = null;\n\n    api.query.society\n      .members(setMembers)\n      .then(u => {\n        unsubscribe = u;\n      })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.society, setMembers]);\n\n  useEffect(() => {\n    let unsubscribe = null;\n\n    api.query.society.strikes\n      .multi(members, setStrikes)\n      .then(u => {\n        unsubscribe = u;\n      })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.society, members, strikes]);\n\n  return (\n    <Grid.Column>\n      <h2>Members</h2>\n      <Card.Group>\n        <MemberCard\n          users={members}\n          strikes={strikes}\n          accountPair={accountPair}\n        />\n      </Card.Group>\n    </Grid.Column>\n  );\n}\n\nexport default function Members (props) {\n  const { api } = useSubstrate();\n  return api.query.society && api.query.society.members ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React from 'react';\nimport { Card, Image } from 'semantic-ui-react';\n\nexport default function FounderCard (props) {\n  const { founder, accountPair } = props;\n\n  if (founder) {\n    return (\n      <Card color={accountPair && accountPair.address === founder.toString() ? 'green' : null}>\n        <Card.Content>\n          <Image\n            floated='right'\n            size='mini'\n            src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\n          />\n          <Card.Header>{founder.toString()}</Card.Header>\n          <Card.Meta>Founder</Card.Meta>\n          <Card.Description>{'description'}</Card.Description>\n        </Card.Content>\n        <Card.Content extra>{'extra'}</Card.Content>\n      </Card>\n    );\n  } else {\n    return null;\n  }\n}\n","import React, { useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from '../substrate-lib';\n\nimport FounderCard from './Cards/FounderCard';\n\nexport default function Founder (props) {\n  const { api } = useSubstrate();\n  const { accountPair, founder, setFounder } = props;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    api.query.society.founder(founder => {\n      setFounder(founder.toString());\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api.query.society, setFounder]);\n\n  return (\n    <Grid.Column>\n      <FounderCard\n        founder={founder}\n        accountPair={accountPair}\n      />\n    </Grid.Column>\n  );\n}\n","import React from 'react';\nimport { Card, Image } from 'semantic-ui-react';\n\nexport default function FounderCard (props) {\n  const { head, accountPair } = props;\n\n  if (head) {\n    return (\n      <Card\n        color={accountPair && accountPair.address === head.toString() ? 'green' : null}\n      >\n        <Card.Content>\n          <Image\n            floated='right'\n            size='mini'\n            src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\n          />\n          <Card.Header>{head.toString()}</Card.Header>\n          <Card.Meta>Head</Card.Meta>\n          <Card.Description>\n            {'description'}\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          {'extra'}\n        </Card.Content>\n      </Card>\n    );\n  } else {\n    return null;\n  }\n}\n","import React, { useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from '../substrate-lib';\n\nimport HeadCard from './Cards/HeadCard';\n\nexport default function Founder (props) {\n  const { api } = useSubstrate();\n  const { accountPair, head, setHead } = props;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    api.query.society.head(head => {\n      setHead(head.toString());\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api.query.society, head, setHead]);\n\n  return (\n    <Grid.Column>\n      <HeadCard\n        head={head}\n        accountPair={accountPair}\n      />\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from '../substrate-lib';\nimport { formatBalance } from '@polkadot/util';\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  const [pot, setPot] = useState(0);\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    api.query.society.pot(number => {\n      setPot(number.toString());\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api.query.society]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={'Society Pot'}\n            value={formatBalance(pot)}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          {'Extra'}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button } from 'semantic-ui-react';\nimport { blake2AsHex } from '@polkadot/util-crypto';\n\nimport { useSubstrate } from '../substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [rules, setRules] = useState('');\n\n  useEffect(() => {\n    let unsubscribe = null;\n\n    api.query.society\n      .rules(setRules)\n      .then(u => {\n        unsubscribe = u;\n      })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.society]);\n\n  const rulesTx =\n    '0x948d3a4378914341dc7af9220a4c73acb2b3f72a70f14ee8089799da16d94c17';\n\n  const rulesText =\n    '# Kappa Sigma Mu (KΣM): The Kusama Fratority #### Or, _Kusama Human Blockchain Project_ ## Preamble Kappa Sigma Mu is a membership club using the the Substrate _Society_ pallet. Society pallet defines most of the process behind becoming a member, however it leaves undefined the specific qualities by which members should be judging member-candidates and challenged-members. This is what is refered to by the `rules` that are passed into the `found` transaction. ## `rules`: Convention of Approval of Membership New candidate members shall be judged on their ability to provide *Proof-of-Ink* to existing members, where the *Ink* shall be a **permanent tattoo** including at least two elements: 1. **An identifier of the Kusama network.** One or more of: the Kusama network\\'s canary symbol; the typography; the full logo; or the Kusama genesis hash. Designs may be filled and in outline. The hash must be rendered in full as a barcode, binary or in hex. An artistic derivative of one or more of these is also acceptable, but may not deviate from the style, design or content sufficently that it be no longer obviously identifiable as Kusama. 2. **An identifier of the parent member.** The parent member, as defined by the society pallet instance\\'s `Head` storage item at the time of candidacy. This should be rendered as one of: an SS58 account or index address; decimal accout index; binary account ID; or a machine-readable image capable of being recognised by a mainstream Kusama wallet. The proof should contain compelling evidence that the tattoo: - exists on the body; - could fit into a circle no smaller than 2.54cm; and - is permanent. In proving each of these, we recommend: - at least two high-quality well-lit photographs; - a video of it being done where the equipment is visible is better; - live witnessing by other members is best, together with pre-publication of the location and time that the tattooing takes place to allow other members to gather and witness. The identity of the member need *not* be discernable nor the specific part of the body on which it is placed. ### Founder Exactly as per the standard convention, but there is no need for the second, \"identifier of the parent member\" since there is no parent member to identify. ### Existing Members (Challenges) Evidence of the continued existence of the tattoo should be provided; high-resolution photographic evidence in good light from a variety of angles and with proof that it was taken after the challenge as announced, such as a recent kusama block hash in frame.';\n\n  return (\n    <Grid.Column>\n      <h2>The Rules of Society</h2>\n      <p>\n        Transaction{' '}\n        <a href={'https://polkascan.io/pre/kusama-cc3/transaction/' + rulesTx}>\n          {rulesTx}\n        </a>\n      </p>\n      <Modal trigger={<Button>Show Rules</Button>}>\n        <Modal.Header>Society Rules</Modal.Header>\n        <Modal.Content scrolling>\n          <Modal.Description>\n            <pre>\n              <code>Rules Hash: {rules.toString()}</code>\n              <br />\n              <code>Text Hash: {' '}{blake2AsHex(rulesText)}</code>\n            </pre>\n            <p>{rulesText}</p>\n          </Modal.Description>\n        </Modal.Content>\n      </Modal>\n    </Grid.Column>\n  );\n}\n\nexport default function Rules (props) {\n  const { api } = useSubstrate();\n  return api.query.society && api.query.society.rules ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React from 'react';\nimport { Card, Image } from 'semantic-ui-react';\nimport { TxButton } from '../../substrate-lib/components';\nimport { useSubstrate } from '../../substrate-lib';\n\nexport default function SuspendedCandidateCard (props) {\n  const { api } = useSubstrate();\n\n  const { accountPair, setStatus, judgementOrigin, users } = props;\n\n  if (users.length !== 0) {\n    return users.map(user => (\n      <Card key={user.toString()}>\n        <Card.Content>\n          <Image\n            floated='right'\n            size='mini'\n            src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\n          />\n          <Card.Header>{user.toString()}</Card.Header>\n          <Card.Meta>Friends of Elliot</Card.Meta>\n          <Card.Description>\n          Steve wants to add you to the group <strong>best friends</strong>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <div className='ui three buttons'>\n            <TxButton\n              accountPair={accountPair}\n              label='Reject'\n              setStatus={setStatus}\n              type='TRANSACTION'\n              color='red'\n              basic\n              attrs={{\n                params: [user, 1],\n                tx: api.tx.society.judgeSuspendedCandidate\n              }}\n              disabled={accountPair && accountPair.address !== judgementOrigin}\n            />\n            <TxButton\n              accountPair={accountPair}\n              label='Rebid'\n              setStatus={setStatus}\n              type='TRANSACTION'\n              color='grey'\n              basic\n              attrs={{\n                params: [user, 0],\n                tx: api.tx.society.judgeSuspendedCandidate\n              }}\n              disabled={accountPair && accountPair.address !== judgementOrigin}\n            />\n            <TxButton\n              accountPair={accountPair}\n              label='Approve'\n              setStatus={setStatus}\n              type='TRANSACTION'\n              color='green'\n              basic\n              attrs={{\n                params: [user, 2],\n                tx: api.tx.society.judgeSuspendedCandidate\n              }}\n              disabled={accountPair && accountPair.address !== judgementOrigin}\n            />\n          </div>\n        </Card.Content>\n      </Card>\n    ));\n  } else {\n    return null;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from '../substrate-lib';\nimport SuspendedCandidateCard from './Cards/SuspendedCandidateCard';\n\nfunction Main (props) {\n  const { api, keyring } = useSubstrate();\n  const [status, setStatus] = useState(null);\n\n  const {\n    accountPair,\n    founder,\n    suspendedCandidates,\n    setSuspendedCandidates\n  } = props;\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribe = null;\n    api.query.society.suspendedCandidates\n      .multi(addresses, suspendedStatuses => {\n        const suspended = [];\n        for (const i in suspendedStatuses) {\n          if (suspendedStatuses[i].isSome) {\n            suspended.push(addresses[i]);\n          }\n        }\n        setSuspendedCandidates(suspended);\n      })\n      .then(u => {\n        unsubscribe = u;\n      })\n      .catch(console.error);\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.society.suspendedCandidates, keyring, setSuspendedCandidates]);\n\n  return (\n    <Grid.Column>\n      <h2>Suspended Candidates</h2>\n      <Card.Group>\n        <SuspendedCandidateCard\n          users={suspendedCandidates}\n          accountPair={accountPair}\n          setStatus={setStatus}\n          judgementOrigin={founder}\n        />\n      </Card.Group>\n      {status}\n    </Grid.Column>\n  );\n}\n\nexport default function Suspended (props) {\n  const { api } = useSubstrate();\n  return api.query.society && api.query.society.suspendedCandidates ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React from 'react';\nimport { Card, Image } from 'semantic-ui-react';\nimport { TxButton } from '../../substrate-lib/components';\nimport { useSubstrate } from '../../substrate-lib';\n\nexport default function SuspendedMemberCard (props) {\n  const { api } = useSubstrate();\n\n  const { accountPair, setStatus, users, judgementOrigin } = props;\n\n  if (users.length !== 0) {\n    return users.map(user => (\n      <Card\n        key={user}\n        color={accountPair.address === user.toString() ? 'green' : null}\n      >\n        <Card.Content>\n          <Image\n            floated='right'\n            size='mini'\n            src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\n          />\n          <Card.Header>{user}</Card.Header>\n          <Card.Meta>Suspended Member</Card.Meta>\n          <Card.Description>\n            Steve wants to add you to the group <strong>best friends</strong>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <div className='ui three buttons'>\n            <TxButton\n              accountPair={accountPair}\n              label='Kick'\n              setStatus={setStatus}\n              type='TRANSACTION'\n              color='red'\n              basic\n              attrs={{\n                params: [user, false],\n                tx: api.tx.society.judgeSuspendedMember\n              }}\n              disabled={accountPair && accountPair.address !== judgementOrigin}\n            />\n            <TxButton\n              accountPair={accountPair}\n              label='Forgive'\n              setStatus={setStatus}\n              type='TRANSACTION'\n              color='green'\n              basic\n              attrs={{\n                params: [user, true],\n                tx: api.tx.society.judgeSuspendedMember\n              }}\n              disabled={accountPair && accountPair.address !== judgementOrigin}\n            />\n          </div>\n        </Card.Content>\n      </Card>\n    ));\n  } else {\n    return null;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from '../substrate-lib';\nimport SuspendedMemberCard from './Cards/SuspendedMemberCard';\n\nfunction Main (props) {\n  const { api, keyring } = useSubstrate();\n  const [status, setStatus] = useState(null);\n\n  const { accountPair, founder, suspendedMembers, setSuspendedMembers } = props;\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribe = null;\n    api.query.society.suspendedMembers\n      .multi(addresses, suspendedStatuses => {\n        const suspended = [];\n        for (const i in suspendedStatuses) {\n          if (suspendedStatuses[i].isTrue) {\n            suspended.push(addresses[i]);\n          }\n        }\n        setSuspendedMembers(suspended);\n      })\n      .then(u => {\n        unsubscribe = u;\n      })\n      .catch(console.error);\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.society.suspendedMembers, keyring, setSuspendedMembers]);\n\n  return (\n    <Grid.Column>\n      <h2>Suspended Members</h2>\n      <Card.Group>\n        <SuspendedMemberCard\n          users={suspendedMembers}\n          accountPair={accountPair}\n          setStatus={setStatus}\n          judgementOrigin={founder}\n        />\n      </Card.Group>\n      {status}\n    </Grid.Column>\n  );\n}\n\nexport default function Suspended (props) {\n  const { api } = useSubstrate();\n  return api.query.society && api.query.society.suspendedMembers ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\nimport AccountSelector from './AccountSelector';\nimport BlockNumber from './BlockNumber';\nimport Events from './Events';\nimport Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport SocietyActions from './society/Actions';\nimport SocietyBalance from './society/Balance';\nimport SocietyBids from './society/Bids';\nimport SocietyCandidates from './society/Candidates';\nimport SocietyDefender from './society/Defender';\nimport SocietyMembers from './society/Members';\nimport SocietyFounder from './society/Founder';\nimport SocietyHead from './society/Head';\nimport SocietyPot from './society/Pot';\nimport SocietyRules from './society/Rules';\nimport SocietySuspendedCandidates from './society/SuspendedCandidates';\nimport SocietySuspendedMembers from './society/SuspendedMembers';\nimport { formatBalance } from '@polkadot/util';\n\nfunction Main () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState } = useSubstrate();\n  const [head, setHead] = useState([]);\n  const [founder, setFounder] = useState([]);\n  const [bids, setBids] = useState([]);\n  const [candidates, setCandidates] = useState([]);\n  const [members, setMembers] = useState([]);\n  const [suspendedCandidates, setSuspendedCandidates] = useState([]);\n  const [suspendedMembers, setSuspendedMembers] = useState([]);\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [finalizedBlockNumber, setfinalizedBlockNumber] = useState(0);\n\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text => (\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>\n  );\n\n  if (apiState === 'ERROR') return loader('Error connecting to the blockchain');\n  else if (apiState !== 'READY') return loader('Connecting to the blockchain');\n\n  if (keyringState !== 'READY') {\n    return loader(\n      \"Loading accounts (please review any extension's authorization)\"\n    );\n  }\n\n  const contextRef = createRef();\n\n  formatBalance.setDefaults({ decimals: 12, unit: '' });\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky>\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row stretched>\n            <NodeInfo />\n            <Metadata />\n            <BlockNumber\n              blockNumber={blockNumber}\n              setBlockNumber={setBlockNumber}\n            />\n            <BlockNumber\n              blockNumber={finalizedBlockNumber}\n              setBlockNumber={setfinalizedBlockNumber}\n              finalized\n            />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <h1>Society</h1>\n          </Grid.Row>\n          <Grid.Row stretched>\n            <SocietyRules />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <SocietyPot />\n            <SocietyBalance accountPair={accountPair} />\n            <SocietyFounder\n              accountPair={accountPair}\n              founder={founder}\n              setFounder={setFounder}\n            />\n            <SocietyHead\n              accountPair={accountPair}\n              head={head}\n              setHead={setHead}\n            />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <SocietyActions\n              accountPair={accountPair}\n              members={members}\n              candidates={candidates}\n              suspendedCandidates={suspendedCandidates}\n              suspendedMembers={suspendedMembers}\n              bids={bids}\n            />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <SocietyBids\n              accountPair={accountPair}\n              bids={bids}\n              setBids={setBids}\n              blockNumber={blockNumber}\n            />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <SocietyCandidates\n              accountPair={accountPair}\n              members={members}\n              candidates={candidates}\n              setCandidates={setCandidates}\n              blockNumber={blockNumber}\n            />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <SocietySuspendedCandidates\n              accountPair={accountPair}\n              suspendedCandidates={suspendedCandidates}\n              setSuspendedCandidates={setSuspendedCandidates}\n              founder={founder}\n            />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <SocietyMembers\n              accountPair={accountPair}\n              members={members}\n              setMembers={setMembers}\n            />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <SocietyDefender\n              accountPair={accountPair}\n              members={members}\n              blockNumber={blockNumber}\n            />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <SocietySuspendedMembers\n              accountPair={accountPair}\n              suspendedMembers={suspendedMembers}\n              setSuspendedMembers={setSuspendedMembers}\n              founder={founder}\n            />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Events />\n          </Grid.Row>\n        </Grid>\n        <DeveloperConsole />\n      </Container>\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}